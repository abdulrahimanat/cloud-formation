---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: CloudTrail across all regions'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'CloudTrail Parameters'
      Parameters:
      - CloudWatchLogsRetentionInDays
      - ExternalTrailBucket
      - LogFilePrefix
    - Label:
        default: 'Alert Parameters'
      Parameters:
      - Email
Parameters:
  CloudWatchLogsRetentionInDays:
    Description: 'The number of days log events are kept in CloudWatch Logs'
    Type: Number
    Default: 3
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  ExternalTrailBucket:
    Description: '(Optional) The name of the Amazon S3 bucket where CloudTrail publishes log files. If you leave this empty, the Amazon S3 bucket is created for you.'
    Type: String
    Default: ''
  LogFilePrefix:
    Description: '(Optional) The log file prefix.'
    Type: String
    Default: ''
  Email:
    Description: '(Optional) email address that will receive alerts.'
    Type: String
    Default: ''
Conditions:
  InternalBucket: !Equals [!Ref ExternalTrailBucket, '']
  ExternalBucket: !Not [!Equals [!Ref ExternalTrailBucket, '']]
  HasLogFilePrefix: !Not [!Equals [!Ref LogFilePrefix, '']]
  HasEmail: !Not [!Equals [!Ref Email, '']]
Resources:
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            Service:
            - 'events.amazonaws.com' 
            - 'budgets.amazonaws.com' 
            - 's3.amazonaws.com' 
          Action: 'sns:Publish'
          Resource: !Ref Topic
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*'
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
      Topics:
      - !Ref Topic
  EmailSubscription:
    Condition: HasEmail
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref Email
      Protocol: email
      TopicArn: !Ref Topic

  TrailBucket:
    Condition: InternalBucket
    Type: 'AWS::S3::Bucket'
    Properties: {}
  TrailBucketPolicy:
    Condition: InternalBucket
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !Sub 'arn:aws:s3:::${TrailBucket}'
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !If [HasLogFilePrefix, !Sub 'arn:aws:s3:::${TrailBucket}/${LogFilePrefix}/AWSLogs/${AWS::AccountId}/*', !Sub 'arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*']
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
        - Sid: AllowSSLRequestsOnly 
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource:
          - !GetAtt 'TrailBucket.Arn'
          - !Sub '${TrailBucket.Arn}/*'
          Condition:
            Bool:
              'aws:SecureTransport': false
  TrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref CloudWatchLogsRetentionInDays
  TrailLogGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeRole1
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'cloudtrail-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'TrailLogGroup.Arn'
  TrailTopic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  TrailTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailSNSPolicy
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Resource: !Ref TrailTopic
          Action: 'sns:Publish'
      Topics:
      - !Ref TrailTopic
  Trail:
    Condition: InternalBucket
    DependsOn:
    - TrailBucketPolicy
    - TrailTopicPolicy
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Ref TrailBucket
      S3KeyPrefix: !Ref LogFilePrefix
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt 'TrailLogGroup.Arn'
      CloudWatchLogsRoleArn: !GetAtt 'TrailLogGroupRole.Arn'
      SnsTopicName: !GetAtt 'TrailTopic.TopicName'
  ExternalTrail:
    Condition: ExternalBucket
    DependsOn:
    - TrailTopicPolicy
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Ref ExternalTrailBucket
      S3KeyPrefix: !Ref LogFilePrefix
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt 'TrailLogGroup.Arn'
      CloudWatchLogsRoleArn: !GetAtt 'TrailLogGroupRole.Arn'
      SnsTopicName: !GetAtt 'TrailTopic.TopicName'


# Console Authentication Failure
  ManagementConsoleAuthFailureMetricFilter: 
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication")}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'ManagementConsoleAuthFailureCount'
  ManagementConsoleAuthFailureAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: Management Console authentication failures detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: ManagementConsoleAuthFailureCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref Topic
      TreatMissingData: notBreaching


# Assume Role Access Denied
  AssumeRoleAccessDeniedMetricFilter: 
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = AssumeRole) && ($.errorMessage = "Access Denied")}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'AssumeRoleAccessDeniedMetricFilterCount'
  AssumeRoleAccessDeniedMetricFilterAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: Assume Role Access denied detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: AssumeRoleAccessDeniedMetricFilterCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref Topic
      TreatMissingData: notBreaching

# Assume Role
  AssumeRoleMetricFilter: 
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = AssumeRole)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'AssumeRoleMetricFilterCount'
  AssumeRoleMetricFilterAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: Assume Role access detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: AssumeRoleMetricFilterCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref Topic
      TreatMissingData: notBreaching

# Console Login
  ConsoleLoginMetricFilter: 
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = ConsoleLogin)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'ConsoleLoginMetricFilterCount'
  ConsoleLoginMetricFilterAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: AWS Console Access detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: ConsoleLoginMetricFilterCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref Topic
      TreatMissingData: notBreaching

Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
